#!/usr/bin/python
### We assume the name of this applet is "demo_python"
### Copy this folder into ~/.config/cairo-dock/third-party.
### In the folder we have :
### demo_python (the executable script), demo_python.conf (the default config file), "icon" (the default icon of the applet) and "preview" (a preview of this applet)

### import ###
import sys
import gobject
import glib
import gtk
import dbus
import os.path
from dbus.mainloop.glib import DBusGMainLoop


### let's connect to the dock. ###
DBusGMainLoop(set_as_default=True)
bus = dbus.SessionBus()
try:
	dock_object = bus.get_object("org.cairodock.CairoDock",
			"/org/cairodock/CairoDock")
except dbus.DBusException:
	print "Cairo-Dock not found on bus (did you activate its 'DBus' plug-in ?)"
	sys.exit(1)
dock_iface = dbus.Interface(dock_object, "org.cairodock.CairoDock")


### let's register our applet ! ###
applet_name=os.path.basename(os.path.abspath("."))
applet_share_data_dir=os.path.abspath(".")
dock_iface.RegisterNewModule(applet_name,
	"This is a distant applet\nIt simulates a counter:\n Scroll up/down to increase/decrease the counter,\n Click/middle-click to increase/decrease the counter by 10\n Drop some text to set it as the label.",
	"Fabounet",
	3, # category "accessories"
	applet_share_data_dir)

### get our applet ! (if it doesn't exist, it means the user does not want to use it, so we quit) ###
try:
	applet_object = bus.get_object("org.cairodock.CairoDock",
			"/org/cairodock/CairoDock/"+applet_name)
except dbus.DBusException:
	print "the '"+applet_name+"' module has not been started"
	sys.exit(2)
applet_iface = dbus.Interface(applet_object, "org.cairodock.CairoDock.applet")
subapplet_iface = dbus.Interface(applet_object, "org.cairodock.CairoDock.subapplet")


### init ###
def init():
	# register to the notifications on our applet
	print "init"
	applet_iface.connect_to_signal("on_click_icon", action_on_click)
	applet_iface.connect_to_signal("on_middle_click_icon", action_on_middle_click)
	applet_iface.connect_to_signal("on_build_menu", action_on_build_menu)
	applet_iface.connect_to_signal("on_menu_select", action_on_menu_select)
	applet_iface.connect_to_signal("on_scroll_icon", action_on_scroll)
	applet_iface.connect_to_signal("on_drop_data", action_on_drop_data)
	applet_iface.connect_to_signal("on_init_module", action_on_init)
	applet_iface.connect_to_signal("on_stop_module", action_on_stop)
	applet_iface.connect_to_signal("on_reload_module", action_on_reload)
	subapplet_iface.connect_to_signal("on_click_icon", on_click_sub_icon)

### stop ###
def stop():
	print "STOP"
	#dock_iface.UnregisterModule(applet_name)
	del dock_object
	del dock_iface
	del applet_object
	del applet_iface


################################################
### Add your own code to the functions below ###
################################################
### global vars ###
count=0

### callbacks ###
def action_on_click(iState):
	global count
	print "clic !"
	count += 10
	applet_iface.SetQuickInfo(format(count, "d"))
	applet_iface.RenderValues([count/100.])

def on_click_sub_icon(iState, cIconID):
	global count
	print "clic on the sub-icon '"+cIconID+"' !"


def action_on_middle_click():
	global count
	print "middle clic !"
	count -= 10
	applet_iface.SetQuickInfo(format(count, "d"))
	applet_iface.RenderValues([count/100.])

def action_on_build_menu():
	print "build menu !"
	applet_iface.PopulateMenu(["set min value", "set medium value", "set max value"])
	
def action_on_menu_select(iNumEntry):
	global count
	print "choice",iNumEntry,"has been selected !"
	if iNumEntry == 0:
		count = 0
	elif iNumEntry == 1:
		count = 50
	elif iNumEntry == 2:
		count = 100
	applet_iface.SetQuickInfo(format(count, "d"))
	applet_iface.RenderValues([count/100.])

def action_on_scroll(bScrollUp):
	global count
	if bScrollUp:
		count += 1
	else:
		count -= 1
	applet_iface.SetQuickInfo(format(count, "d"))
	applet_iface.RenderValues([count/100.])

def action_on_drop_data(cReceivedData):
	print "received",cReceivedData
	applet_iface.SetLabel(cReceivedData)


def action_on_init():
	global count
	print "our module is started"
	count=1
	applet_iface.ShowDialog("I'm connected to Cairo-Dock !", 4)
	applet_iface.SetQuickInfo(format(count, "d"))
	applet_iface.AddSubIcons(["icon 1", "firefox-3.0", "id1", "icon 2", "trash", "id2", "icon 3", "thunderbird", "id3", "icon 4", "nautilus", "id4"])
	applet_iface.RemoveSubIcon("id2")
	applet_iface.AddDataRenderer("gauge", 1, "Turbo-night")
	applet_iface.RenderValues([0.])
	subapplet_iface.SetQuickInfo("1", "id1")
	subapplet_iface.SetQuickInfo("2", "id2")
	subapplet_iface.SetQuickInfo("3", "id3")
	subapplet_iface.SetQuickInfo("4", "id4")

def action_on_stop():
	global count
	print "our module is stopped"
	count=0
	sys.exit(0)

def action_on_reload(bConfigHasChanged):
	print "our module is reloaded"
	if bConfigHasChanged:
		print " and our config has changed"
		applet_iface.AddDataRenderer("gauge", 1, "Turbo-night")
		applet_iface.RenderValues([count/100.])
		applet_iface.AddSubIcons(["icon 1", "firefox-3.0", "echo pouet", "icon 2", "trash", "abc", "icon 3", "thunderbird", "def"])


### main ###
if __name__ == '__main__':
	init()
	gtk.main()
	stop()
	sys.exit(0)
