#!/usr/bin/env python

# This application is released under the GNU General Public License 
# v3 (or, at your option, any later version). You can find the full 
# text of the license under http://www.gnu.org/licenses/gpl.txt. 
# By using, editing and/or distributing this software you agree to 
# the terms and conditions of this license. 
# Thank you for using free software!
#
#(c) Whise 2008,2009 <helderfraga@gmail.com>
#
# GnoMenu cairo dock loader
# Part of the GnoMenu


### import ###
import sys
import gobject
import glib
import gtk
import dbus
import os.path
from dbus.mainloop.glib import DBusGMainLoop



try:
	INSTALL_PREFIX = open("/etc/gnomenu/prefix").read()[:-1] 
except:
	INSTALL_PREFIX = '/usr'
sys.path.append(INSTALL_PREFIX + '/lib/gnomenu')
import gettext
gettext.textdomain('gnomenu')
gettext.install('gnomenu', INSTALL_PREFIX +  '/share/locale')
gettext.bindtextdomain('gnomenu', INSTALL_PREFIX +  '/share/locale')
import backend



### init ###
def init():
        # register to the notifications on our applet
        print ">>> INIT"
        myIcon.connect_to_signal("on_click", action_on_click)
        myIcon.connect_to_signal("on_middle_click", action_on_middle_click)
        myIcon.connect_to_signal("on_build_menu", action_on_build_menu)
        myIcon.connect_to_signal("on_menu_select", action_on_menu_select)
        myIcon.connect_to_signal("on_drop_data", action_on_drop_data)
        myIcon.connect_to_signal("on_init_module", action_on_init)
        myIcon.connect_to_signal("on_stop_module", action_on_stop)
        myIcon.connect_to_signal("on_reload_module", action_on_reload)


### stop ###
def stop():
        print ">>> STOP"
        #dock.UnregisterModule(applet_name)
        # clean up memory
        #del dock_object
        #del dock
        #del applet_object
        #del myIcon
	appleticon.end()






### hanlers ###
def action_on_click(iState):
        appleticon.click()

def action_on_middle_click():
        print ">>> middle clic !"

def action_on_build_menu():
        print ">>> build menu !"
        myIcon.PopulateMenu([_("Preferences"), _("About"), _("Edit Menus")])

def action_on_menu_select(iNumEntry):
        print ">>> choice",iNumEntry,"has been selected !"
        if iNumEntry == 0:
                os.system("/bin/sh -c '"+ INSTALL_PREFIX +"/lib/gnomenu/GnoMenu-Settings.py' &")
        elif iNumEntry == 1:
                os.system("/bin/sh -c '" + INSTALL_PREFIX +"/lib/gnomenu/GnoMenu-Settings.py --about' &")
        elif iNumEntry == 2:
                os.spawnvp(os.P_WAIT,"alacarte",["alacarte"])


def action_on_drop_data(cReceivedData):
        print ">>> received",cReceivedData
        myIcon.SetLabel(cReceivedData)


def action_on_init():
        print ">>> our module is started"
        #myIcon.ShowDialog("I'm connected to Cairo-Dock !", 4)
      


def action_on_stop():
        print ">>> our module is stopped"
        stop()
        gtk.main_quit()

def action_on_reload(bConfigHasChanged):
        print ">>> our module is reloaded"
        if bConfigHasChanged:
            appleticon.LoadConfig()
            appleticon.RefreshIcon()


###Sub-handlers###

def MessageRecieve(**args):
    print args
    print ">>>>>>message from %s, '%s', total unread messages: %d" %(args['sender'], args['message'], \
                                args['unread'][0],'kkkkkkkkkkkkkkkkkk')
    appleticon.RefreshIcon(args)

def StatusChanged(**args):
    print ">>status changed"
    print args

    appleticon.RefreshIcon()
    #SetCurrentStatusIcon(alarm=False)

def MessageReaded(**args):
    print ">>message readed, refresh"
    appleticon.RefreshIcon()


def Connecting(**args):
    print ">>connecting"
    if not appleticon.IsConnecting:
        appleticon.IsConnecting = True
        appleticon.SetIcon('Connecting')





class AppletIcon(object):

    def __init__(self, icon_object, dock_object):

        self.__dock = dock_object
        self.__myIcon = icon_object
        self.RefreshIcon()
	f = open(self.GetConfigPath() + 'cairo-dock.conf' , "r")

	self.orient = None
	self.ygap = None
	self.xgap = None
	self.margin  = None

	for line in f.readlines():
		if line.startswith('screen border='):
			text = line.replace('screen border=','')
			text = int(text.replace('\n',''))
			print 'aaaaaaaaa        ',text
			if text == 1:
				backend.save_setting('orientation', 'top')
			else:
				backend.save_setting('orientation', 'bottom')
			self.orient = text

		elif line.startswith('x gap='):
			text = line.replace('x gap=','')
			text = int(text.replace('\n',''))
			self.xgap = text

		elif line.startswith('y gap='):
			text = line.replace('y gap=','')
			text = int(text.replace('\n',''))
			self.ygap = text

		elif line.startswith('frame margin='):
			text = line.replace('frame margin=','')
			text = int(text.replace('\n',''))
			self.margin = text

		if self.ygap != None and self.xgap != None and self.orient != None and self.margin != None:
			break



	from Menu_Main import Main_Menu
	self.hwg = Main_Menu(self.HideMenu)
	import Globals as Globals
	self.Globals = Globals
	self.show = False


    def end(self):
	self.hwg.destroy()

    def ShowMenu(self):
	# Display the start menu!!!
	f = open(self.GetConfigPath() + 'cairo-dock.conf' , "r")
	for line in f.readlines():
		if line.startswith('applet size='):
			text = line.replace('applet size=','')
			text = text.replace('\n','')
			text = text.split(';')
			self.appletsize = text
			break
	rootwin = self.hwg.window.get_screen().get_root_window()
	x, y, mods = rootwin.get_pointer()


	if self.orient == 0:#bottom
		self.hwg.Adjust_Window_Dimensions(x -(self.Globals.MenuWidth/2),gtk.gdk.screen_height() - self.Globals.MenuHeight - (int(self.appletsize[1])+ self.ygap + (self.margin*2)))#self.Globals.PG_buttonframedimensions[1])#self.applet.get_window().get_geometry()[3]/2 -10)
	elif self.orient == 1:#top
		self.hwg.Adjust_Window_Dimensions(x -(self.Globals.MenuWidth/2),int(self.appletsize[1])+ self.ygap + (self.margin*2))#self.Globals.PG_buttonframedimensions[1])#self.applet.get_window().get_geometry()[3]/2 -10) gtk.gdk.screen_height()
	elif self.orient == 2:#right
		self.hwg.Adjust_Window_Dimensions(gtk.gdk.screen_width()- self.Globals.MenuWidth - (int(self.appletsize[0])+ self.xgap + (self.margin*2)),y - self.Globals.MenuHeight/2)
	elif self.orient == 3:#left
		self.hwg.Adjust_Window_Dimensions((int(self.appletsize[0])+ self.xgap + (self.margin*2)),y - self.Globals.MenuHeight/2)
	else:
		
		self.hwg.Adjust_Window_Dimensions(gtk.gdk.screen_width()/2 -(self.Globals.MenuWidth/2),gtk.gdk.screen_height() - self.Globals.MenuHeight - (int(self.appletsize[1])+ self.ygap + (self.margin*2)))#self.Globals.PG_buttonframedimensions[1])#self.applet.get_window().get_geometry()[3]/2 -10) gtk.gdk.screen_height()
	self.hwg.show_window()
	self.show = True

    def HideMenu(self):

	if self.hwg:
		if self.hwg.window.window:
			if self.hwg.window.window.is_visible()== True:
				self.hwg.hide_window()
		        	self.show = False


    def GetAppletDir(self):
        #return os.path.abspath(".")+"/"
        return os.path.expanduser("~/.config/cairo-dock/third-party/"+applet_name+"/")


    def GetThemeDir(self):
        #return os.path.abspath(".")+"/Themes/"+self.config['Theme']+"/"
        return self.GetAppletDir()+"Themes/"+self.config['Theme']+"/"


    def GetConfigPath(self):
        return os.path.expanduser("~/.config/cairo-dock/current_theme/")


    def click(self):
	if self.show:
		self.HideMenu()
	else:
		self.ShowMenu()

    def LoadConfig(self):
        pass


    def LoadTheme(self):
	pass

    def AnimatePlay(self, delay, images, overlay, statusname):
        pass

    def SetCurrentStatusIcon(self, alarm=False):
        pass


    def CheckOverlayImage(self, imagename, statusname):
        pass



    def SetIcon(self, statusname):
        self.__myIcon.SetIcon(INSTALL_PREFIX + "/lib/gnomenu/graphics/logo.svg" )



    def RefreshIcon(self, message=None):
        self.__myIcon.SetIcon(INSTALL_PREFIX + "/lib/gnomenu/graphics/logo.svg" )
     



### let's connect to the dock. ###
DBusGMainLoop(set_as_default=True)
bus = dbus.SessionBus()
try:
        dock_object = bus.get_object("org.cairodock.CairoDock",
                        "/org/cairodock/CairoDock")
except dbus.DBusException:
        print "Cairo-Dock not found on bus (did you activate its 'DBus' plug-in ?)"
        sys.exit(1)
dock = dbus.Interface(dock_object, "org.cairodock.CairoDock")



### let's register our applet ! ###
applet_name=os.path.basename(os.path.abspath("."))
applet_share_data_dir=os.path.abspath(".")
print ">>> registering our applet..."
dock.RegisterNewModule(applet_name, "GnoMenu",
                "helderfraga@gmail.com",
                "0.0.1",
                2, # category "accessories"
                applet_share_data_dir)
print ">>> applet registered."

### get our applet ! (if it doesn't exist, it means the user does not want to use it, so we quit) ###
try:
        applet_object = bus.get_object("org.cairodock.CairoDock",
                        "/org/cairodock/CairoDock/"+applet_name)
except dbus.DBusException:
        print ">>> the '"+applet_name+"' module has not been started"
        sys.exit(2)
myIcon = dbus.Interface(applet_object, "org.cairodock.CairoDock.applet")


### main ###
if __name__ == '__main__':


    init()
    appleticon = AppletIcon( icon_object=myIcon, dock_object=dock_object)
    gtk.main()
    stop()
    print ">>> bye"
    sys.exit(0)



